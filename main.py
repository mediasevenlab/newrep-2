from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import requests
import base64
import os

app = FastAPI()

# üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º GitHub-—Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
GITHUB_TOKEN = os.getenv("GH_TOKEN")  
GITHUB_USERNAME = "mediasevenlab"
REPO_NAME = "newrep-2"
BASE_URL = f"https://api.github.com/repos/{GITHUB_USERNAME}/{REPO_NAME}/contents"

class FileRequest(BaseModel):
    filename: str
    content: str

def get_file_sha(filename):
    """–ü–æ–ª—É—á–∞–µ—Ç SHA —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º"""
    file_url = f"{BASE_URL}/{filename}"
    headers = {"Authorization": f"token {GITHUB_TOKEN}"}
    response = requests.get(file_url, headers=headers)
    
    if response.status_code == 200:
        return response.json().get("sha")
    return None

@app.post("/create-file")
async def create_file(request: FileRequest):
    """–°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤ GitHub"""
    file_url = f"{BASE_URL}/{request.filename}"
    headers = {"Authorization": f"token {GITHUB_TOKEN}"}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ SHA
    sha = get_file_sha(request.filename)

    data = {
        "message": f"–û–±–Ω–æ–≤–ª—ë–Ω {request.filename} —á–µ—Ä–µ–∑ API",
        "content": base64.b64encode(request.content.encode()).decode(),
        "sha": sha  # –ï—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å, –æ–Ω –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω
    }

    response = requests.put(file_url, headers=headers, json=data)
    
    if response.status_code in [200, 201]:
        return {"message": f"‚úÖ –§–∞–π–ª '{request.filename}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω!"}
    else:
        raise HTTPException(status_code=response.status_code, detail=response.json())

@app.delete("/delete-file")
async def delete_file(filename: str):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ GitHub"""
    sha = get_file_sha(filename)
    if not sha:
        raise HTTPException(status_code=404, detail="‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    file_url = f"{BASE_URL}/{filename}"
    headers = {"Authorization": f"token {GITHUB_TOKEN}"}
    data = {
        "message": f"–£–¥–∞–ª—ë–Ω {filename} —á–µ—Ä–µ–∑ API",
        "sha": sha
    }

    response = requests.delete(file_url, headers=headers, json=data)
    
    if response.status_code == 200:
        return {"message": f"‚úÖ –§–∞–π–ª '{filename}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!"}
    else:
        raise HTTPException(status_code=response.status_code, detail=response.json())

if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", 10000))  # Render –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    uvicorn.run(app, host="0.0.0.0", port=port)
